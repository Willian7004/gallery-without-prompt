使用streamlit写一个程序，实现以下功能：
1.在同一行从左到右依次创建：按钮，按钮上为刷新图标。下拉菜单，有16：9和9：16两个选项，默认选择16：9。复选框，文字为“显示下载按钮”。
2.下拉菜单选中16：9时，在当前目录下名称为16：9的文件夹中随机选择20张图片并显示。
3.下拉菜单选中9：16时，在当前目录下名称为9：16的文件夹中随机选择20张图片，分两列显示。
4.选中复选框时，在每张图片下方显示下载按钮，点击下载按钮时下载相应图片。
5.按下刷新按钮时，重新随机选择20张图片并显示。

要实现这个功能，你可以使用 `streamlit` 库来创建一个交互式的 Web 应用。以下是一个完整的代码示例，实现了你描述的功能：

```python
import os
import random
import streamlit as st
from PIL import Image

# 创建文件夹路径
folder_16_9 = "16：9"
folder_9_16 = "9：16"

# 确保文件夹存在
if not os.path.exists(folder_16_9):
    os.makedirs(folder_16_9)
if not os.path.exists(folder_9_16):
    os.makedirs(folder_9_16)

# 获取文件夹中的所有图片文件
def get_images(folder):
    images = [os.path.join(folder, f) for f in os.listdir(folder) if f.endswith(('.png', '.jpg', '.jpeg', '.gif'))]
    return images

# 随机选择20张图片
def select_random_images(images, count=20):
    return random.sample(images, min(count, len(images)))

# 显示图片并添加下载按钮
def display_images(images, show_download_button, columns=1):
    if columns == 1:
        for img_path in images:
            img = Image.open(img_path)
            st.image(img, use_column_width=True)
            if show_download_button:
                with open(img_path, "rb") as file:
                    btn = st.download_button(
                        label="下载图片",
                        data=file,
                        file_name=os.path.basename(img_path),
                        mime="image/jpeg"
                    )
    else:
        cols = st.columns(columns)
        for i, img_path in enumerate(images):
            img = Image.open(img_path)
            cols[i % columns].image(img, use_column_width=True)
            if show_download_button:
                with open(img_path, "rb") as file:
                    btn = cols[i % columns].download_button(
                        label="下载图片",
                        data=file,
                        file_name=os.path.basename(img_path),
                        mime="image/jpeg"
                    )

# Streamlit 应用
def main():
    st.title("图片展示应用")

    # 在同一行创建按钮、下拉菜单和复选框
    col1, col2, col3 = st.columns(3)
    with col1:
        refresh_button = st.button("🔄 刷新")
    with col2:
        aspect_ratio = st.selectbox("选择图片比例", ["16：9", "9：16"], index=0)
    with col3:
        show_download_button = st.checkbox("显示下载按钮")

    # 根据下拉菜单的选择加载图片
    if aspect_ratio == "16：9":
        images = get_images(folder_16_9)
        display_columns = 1
    else:
        images = get_images(folder_9_16)
        display_columns = 2

    # 如果按下刷新按钮，重新选择图片
    if refresh_button:
        st.experimental_rerun()

    # 随机选择20张图片并显示
    selected_images = select_random_images(images)
    display_images(selected_images, show_download_button, display_columns)

if __name__ == "__main__":
    main()
```

### 代码说明：
1. **文件夹路径**：代码中假设当前目录下有两个文件夹 `16：9` 和 `9：16`，分别存放不同比例的图片。
2. **获取图片**：`get_images` 函数用于获取指定文件夹中的所有图片文件。
3. **随机选择图片**：`select_random_images` 函数从图片列表中随机选择指定数量的图片。
4. **显示图片**：`display_images` 函数根据列数显示图片，并在需要时添加下载按钮。
5. **Streamlit 应用**：`main` 函数创建了 Streamlit 应用，包含刷新按钮、下拉菜单和复选框，并根据用户的选择显示图片。

### 运行程序：
1. 将代码保存为 `app.py`。
2. 在终端中运行 `streamlit run app.py`。
3. 打开浏览器，访问 Streamlit 应用。

### 注意事项：
- 确保 `16：9` 和 `9：16` 文件夹中存在足够的图片文件。
- 如果文件夹中没有足够的图片，`random.sample` 会抛出错误，因此代码中使用了 `min(count, len(images))` 来确保不会选择超过实际存在的图片数量。

这个程序将根据用户的选择显示不同比例的图片，并允许用户下载图片。